name: Snyk Code Scan (Python)

# Controls when the workflow will run
on:
  # This workflow uses the "workflow_call" event to allow it to be called from other workflows
    workflow_call:
  
# Assign permissions for the workflow      
permissions:
  contents: read

jobs:
  security:
    name: Snyk Code Scan (Python)
    permissions:
      actions: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Monitor dependencies with Snyk
        # This step is optional, but it is recommended to run Snyk monitor to keep track of your dependencies
        # and receive alerts for any vulnerabilities that may arise in the future.
        # It will also create a Snyk project for your repository.
        # This step will not fail the workflow if there are vulnerabilities found.
        uses: snyk/actions/python@cdb760004ba9ea4d525f2e043745dfe85bb9077e # Sep 6, 2024 - Verified
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects --detection-depth=5
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@cdb760004ba9ea4d525f2e043745dfe85bb9077e # Sep 6, 2024 - Verified
        continue-on-error: true # To make sure that SARIF upload gets called even if there are vulnerabilities
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --all-projects --detection-depth=5 
      - name: Upload result to GitHub Code Scanning
        # This step uploads the SARIF file to GitHub Code Scanning
        # Only upload if the file exists
        if: ${{ hashFiles('**/snyk.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@60168efe1c415ce0f5521ea06d5c2062adbeed1b # v3.28.17
        with:
          sarif_file: snyk.sarif
          category: "snyk-python"
